#!/bin/bash


# ----- Variables -----

linode_server_name="wog-minecraft-server"
linode_image_name="wog-minecraft-server"

token=''
pathToToken=''
rootPassword=''

pathToToken="./LINODE_API_TOKEN"
pathToToken=$(readlink -f $pathToToken)
token=$(cat $pathToToken)

defaultRootPassword='DefaultLinodeServerPasswordRoot'


# ----- Functions -----


check_default_password () {
  if [ "$rootPassword" = '' ]
  then
    printf "
  Root password not set!
  It will be defaulted to '$defaultRootPassword'!
  It is HIGHLY recommended you set the password using the -p flag!\n\n"
    rootPassword=$defaultRootPassword
  fi
}

keep_only_x_images () {
  images=$(private_images_by_created_time | jq --arg key $linode_image_name 'select(.label==$key)')
  if [ $( echo $images | jq '.id' | wc -l) -gt $1 ]; then
    oldest_image=$(echo $images | jq -rs 'last | .id')
    curl -s -H "Authorization: Bearer $TOKEN" -X DELETE https://api.linode.com/v4/images/$oldest_image
  fi
}

private_images_by_created_time () {
 curl -sH "Authorization: Bearer $token" \
    https://api.linode.com/v4/images | jq '.data | sort_by(.created) | reverse | .[] | select(.id | startswith("private"))'
}

latest_private_image () {
  private_images_by_created_time | jq -rs 'first | .id'
}

oldest_private_image () {
  private_images_by_created_time | jq -rs 'last | .id'
}


wog_minecraft_server_POST () {
  cat <<EOF
  {
    "image": "$1",
    "region": "eu-central",
    "type": "g6-standard-6",
    "label": "wog-minecraft-server",
    "tags": [],
    "root_pass": "$rootPassword",
    "authorized_users": [
        "WorldOfGlory"
    ],
    "booted": true,
    "backups_enabled": false,
    "private_ip": false
  }
EOF
}

waitfor_shutdown () {
  printf "\nWaiting for shutdown...\n"
  while true; do
    response=$(curl -s -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $token" \
                  "https://api.linode.com/v4/linode/instances/$1" \
              | jq -r '.status')
    if [ "$response" == "offline" ]; then
      break
    fi
      printf ". (status = $response)\n"
      sleep 5
  done
}

shutdown_linode () {
  curl -sH "Content-Type: application/json" \
    -H "Authorization: Bearer $token" \
    -X POST \
    https://api.linode.com/v4/linode/instances/$1/shutdown
}

waitfor_create_image () {
  printf "\nWriting image of linode...\n"
  while true; do
    response=$(curl -s -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $token" \
                  "https://api.linode.com/v4/images" \
              | jq -r --arg key $1 '.data[] | select(.id==$key) | .status')
    if [ "$response" == "available" ]; then
      break
    fi
      printf ". (status = $response )\n"
      sleep 5
  done
}

create_linode_image () {

  disk_id=$(curl -sH "Authorization: Bearer $token" \
    https://api.linode.com/v4/linode/instances/$1/disks | jq -r '.data[0].id')
  echo $disk_id - diskid

  image_id=$(curl -sH "Content-Type: application/json" \
    -H "Authorization: Bearer $token" \
    -X POST -d '{
      "disk_id": '$disk_id',
      "label": "'"$linode_image_name"'"
    }' \
    https://api.linode.com/v4/images | jq -r '.id')

  echo $image_id - imageid

  waitfor_create_image $image_id
}

command_status () {
  status_json=$(curl -sH "Authorization: Bearer $token" \
    https://api.linode.com/v4/linode/instances)

  status_formated=$(echo $status_json | jq -r '.data[] | "\(.id) \(.label)   \(.status)   \(.ipv4)"')
  
  printf "Current up servers:\n$status_formated
  \n"
}

command_up () {
  check_default_password

  image_to_boot_up=$(latest_private_image)

  post_output=$(curl -sH "Content-Type: application/json" \
    -H "Authorization: Bearer $token" \
    -X POST -d "$(wog_minecraft_server_POST $image_to_boot_up)" \
    https://api.linode.com/v4/linode/instances)

  printf "\n\nServer Booting Up!\n"

  printf "\n\n Connect to the instance with ssh root@$(echo $post_output | jq -r '.ipv4[0]')\n"
}

command_down () {
  linode_minecraft_id=$(curl -sH "Authorization: Bearer $token" \
    https://api.linode.com/v4/linode/instances | \
    jq --arg key $linode_server_name '.data[] | select(.label==$key) | .id')
  
  echo $linode_minecraft_id

  shutdown_linode $linode_minecraft_id
  waitfor_shutdown $linode_minecraft_id

  create_linode_image $linode_minecraft_id
  keep_only_x_images 2

  curl -H "Authorization: Bearer $token" \
    -X DELETE \
    https://api.linode.com/v4/linode/instances/$linode_minecraft_id
}

print_usage() {
  printf "Usage:
    wog-minecraft-server <flags> up|down|status\n
    -t <token> Your Linode API Token\n
    -h Help\n
    -f <file> Path to file with Linode API Token (default "./LINODE_API_TOKEN")\n
    -p <string> Set root password (default: $defaultRootPassword)\n
    "

}


# ----- Flags! -----

while getopts 'ht:f:p:' flag; do
  case "${flag}" in
    h) 
       print_usage
       exit 1 ;;
    p) 
       rootPassword="${OPTARG}" ;;
    f) 
       pathToToken="${OPTARG}"
       pathToToken=$(readlink -f $pathToToken)
       token=$(cat $pathToToken) ;;
    t) 
       token="${OPTARG}" ;;
    *) 
       print_usage
       exit 1 ;;
  esac
done
shift $((OPTIND - 1))


# ----- "What to do" Options -----

if [ "$token" = '' ]
then
  printf "Token required!\n\n"
  print_usage
  exit 1
fi

if [ "$1" = 'status' ]
then
  command_status
elif [ "$1" = 'up' ]
then
  command_up
elif [ "$1" = 'down' ]
then
  command_down
elif [ "$1" = 'test' ]
then
  echo test
else
  printf "Invalid command!\n\n"
  print_usage
  exit 1
fi


